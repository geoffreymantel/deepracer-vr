//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.DeepracerInterfacesPkg
{
    [Serializable]
    public class SensorStatusCheckSrvResponse : Message
    {
        public const string k_RosMessageName = "deepracer_interfaces_pkg/SensorStatusCheckSrv";
        public override string RosMessageName => k_RosMessageName;

        //  Flag indicating if the LiDAR sensor is connected and LiDAR data is being read.
        public sbyte lidar_status;
        //  Flag indicating if the single camera is connected and single camera data is being read.
        public sbyte single_camera_status;
        //  Flag indicating if the two cameras are connected and two cameras data is being read.
        public sbyte stereo_camera_status;
        //  Error flag indicating successful/failed service call.
        public int error;

        public SensorStatusCheckSrvResponse()
        {
            this.lidar_status = 0;
            this.single_camera_status = 0;
            this.stereo_camera_status = 0;
            this.error = 0;
        }

        public SensorStatusCheckSrvResponse(sbyte lidar_status, sbyte single_camera_status, sbyte stereo_camera_status, int error)
        {
            this.lidar_status = lidar_status;
            this.single_camera_status = single_camera_status;
            this.stereo_camera_status = stereo_camera_status;
            this.error = error;
        }

        public static SensorStatusCheckSrvResponse Deserialize(MessageDeserializer deserializer) => new SensorStatusCheckSrvResponse(deserializer);

        private SensorStatusCheckSrvResponse(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.lidar_status);
            deserializer.Read(out this.single_camera_status);
            deserializer.Read(out this.stereo_camera_status);
            deserializer.Read(out this.error);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.lidar_status);
            serializer.Write(this.single_camera_status);
            serializer.Write(this.stereo_camera_status);
            serializer.Write(this.error);
        }

        public override string ToString()
        {
            return "SensorStatusCheckSrvResponse: " +
            "\nlidar_status: " + lidar_status.ToString() +
            "\nsingle_camera_status: " + single_camera_status.ToString() +
            "\nstereo_camera_status: " + stereo_camera_status.ToString() +
            "\nerror: " + error.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize, MessageSubtopic.Response);
        }
    }
}
