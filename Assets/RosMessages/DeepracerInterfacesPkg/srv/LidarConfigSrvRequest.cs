//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.DeepracerInterfacesPkg
{
    [Serializable]
    public class LidarConfigSrvRequest : Message
    {
        public const string k_RosMessageName = "deepracer_interfaces_pkg/LidarConfigSrv";
        public override string RosMessageName => k_RosMessageName;

        //  Flag to add/stop LiDAR data to subsequent sensor messages.
        public bool use_lidar;
        //  Minimum LiDAR angle to consider while interpolating the LiDAR data.
        public float min_angle;
        //  Maximum LiDAR angle to consider while interpolating the LiDAR data.
        public float max_angle;
        //  Number of LiDAR distance value to interpolate the LiDAR data.
        public int num_values;
        //  Minimum distance from which the LiDAR distance data is considered valid.
        public float min_distance;
        //  Maximum distance up to which the LiDAR distance data is considered valid.
        public float max_distance;
        //  Distance value to clip the maximum LiDAR distance data.
        public float clipping_distance;
        //  Number of sectors to consider while processing LiDAR data as binary sectors.
        public int num_sectors;
        //  Type of LiDAR data preprocessing (SECTOR, DEFAULT).
        public sbyte preprocess_type;

        public LidarConfigSrvRequest()
        {
            this.use_lidar = false;
            this.min_angle = 0.0f;
            this.max_angle = 0.0f;
            this.num_values = 0;
            this.min_distance = 0.0f;
            this.max_distance = 0.0f;
            this.clipping_distance = 0.0f;
            this.num_sectors = 0;
            this.preprocess_type = 0;
        }

        public LidarConfigSrvRequest(bool use_lidar, float min_angle, float max_angle, int num_values, float min_distance, float max_distance, float clipping_distance, int num_sectors, sbyte preprocess_type)
        {
            this.use_lidar = use_lidar;
            this.min_angle = min_angle;
            this.max_angle = max_angle;
            this.num_values = num_values;
            this.min_distance = min_distance;
            this.max_distance = max_distance;
            this.clipping_distance = clipping_distance;
            this.num_sectors = num_sectors;
            this.preprocess_type = preprocess_type;
        }

        public static LidarConfigSrvRequest Deserialize(MessageDeserializer deserializer) => new LidarConfigSrvRequest(deserializer);

        private LidarConfigSrvRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.use_lidar);
            deserializer.Read(out this.min_angle);
            deserializer.Read(out this.max_angle);
            deserializer.Read(out this.num_values);
            deserializer.Read(out this.min_distance);
            deserializer.Read(out this.max_distance);
            deserializer.Read(out this.clipping_distance);
            deserializer.Read(out this.num_sectors);
            deserializer.Read(out this.preprocess_type);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.use_lidar);
            serializer.Write(this.min_angle);
            serializer.Write(this.max_angle);
            serializer.Write(this.num_values);
            serializer.Write(this.min_distance);
            serializer.Write(this.max_distance);
            serializer.Write(this.clipping_distance);
            serializer.Write(this.num_sectors);
            serializer.Write(this.preprocess_type);
        }

        public override string ToString()
        {
            return "LidarConfigSrvRequest: " +
            "\nuse_lidar: " + use_lidar.ToString() +
            "\nmin_angle: " + min_angle.ToString() +
            "\nmax_angle: " + max_angle.ToString() +
            "\nnum_values: " + num_values.ToString() +
            "\nmin_distance: " + min_distance.ToString() +
            "\nmax_distance: " + max_distance.ToString() +
            "\nclipping_distance: " + clipping_distance.ToString() +
            "\nnum_sectors: " + num_sectors.ToString() +
            "\npreprocess_type: " + preprocess_type.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
